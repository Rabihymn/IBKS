{"ast":null,"code":"var _jsxFileName = \"/Users/rabihyamani/Desktop/IBKS/ibks/src/Component/SingleTicket/index.tsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport TicketView from \"../TicketView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SingleTicketView() {\n  _s();\n  const [ticketData, setTicketData] = useState();\n  const [value, setValue] = useState(\"\");\n  const [rows, setRows] = useState(3);\n  const handleChange = event => {\n    setValue(event.target.value);\n    setRows(event.target.value.split(\"\\n\").length); // Adjust rows based on line breaks\n  };\n  //   console.log(value);\n  const fetchSingleTicketData = useCallback(async () => {\n    try {\n      const response = await axios.get(\"/api/tickets/39\");\n      setTicketData(response.data);\n    } catch (error) {\n      handleRequestError(error);\n    }\n  }, []);\n  const handleRequestError = error => {\n    console.error(\"An error occurred:\", error);\n    // Add logic here to handle or display the error message to the user\n  };\n  useEffect(() => {\n    fetchSingleTicketData();\n  }, [fetchSingleTicketData]);\n  if (ticketData) console.log(ticketData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto\",\n    children: ticketData && /*#__PURE__*/_jsxDEV(TicketView, {\n      ticketData: ticketData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 22\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(SingleTicketView, \"MWUNSg+Y6aOlIAYU3QSXnYUxVw8=\");\n_c = SingleTicketView;\nexport default SingleTicketView;\nvar _c;\n$RefreshReg$(_c, \"SingleTicketView\");","map":{"version":3,"names":["axios","useCallback","useEffect","useState","TicketView","jsxDEV","_jsxDEV","SingleTicketView","_s","ticketData","setTicketData","value","setValue","rows","setRows","handleChange","event","target","split","length","fetchSingleTicketData","response","get","data","error","handleRequestError","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rabihyamani/Desktop/IBKS/ibks/src/Component/SingleTicket/index.tsx"],"sourcesContent":["import axios from \"axios\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport TicketView from \"../TicketView\";\n\ninterface Priority {\n  id: number;\n  title: string;\n}\n\ninterface Ticket {\n  id: number;\n  title: string;\n  description: string;\n  priorityId: number;\n  statusId: number;\n  ticketTypeId: number;\n  priorityById: {\n    id: number;\n    title: string;\n  };\n  statusById: {\n    id: number;\n    title: string;\n  };\n  ticketTypeById: {\n    id: number;\n    title: string;\n  };\n  applicationName: string;\n  ticketReplies: TicketReply[];\n}\n\ninterface TicketReply {\n  replyId: number;\n  tId: number;\n  reply: string;\n}\n\ninterface Type {\n  id: number;\n  title: string;\n}\nfunction SingleTicketView() {\n  const [ticketData, setTicketData] = useState<Ticket>();\n\n  const [value, setValue] = useState(\"\");\n  const [rows, setRows] = useState(3);\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n    setRows(event.target.value.split(\"\\n\").length); // Adjust rows based on line breaks\n  };\n  //   console.log(value);\n  const fetchSingleTicketData = useCallback(async () => {\n    try {\n      const response = await axios.get(\"/api/tickets/39\");\n      setTicketData(response.data);\n    } catch (error) {\n      handleRequestError(error);\n    }\n  }, []);\n\n\n\n  const handleRequestError = (error: unknown) => {\n    console.error(\"An error occurred:\", error);\n    // Add logic here to handle or display the error message to the user\n  };\n\n  useEffect(() => {\n    fetchSingleTicketData();\n  }, [fetchSingleTicketData]);\n  if (ticketData) console.log(ticketData);\n  return (\n    <div className=\"container mx-auto\">\n      {ticketData && <TicketView ticketData={ticketData} />}\n    </div>\n  );\n}\n\nexport default SingleTicketView;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAGxD,OAAOC,UAAU,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAwCvC,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAS,CAAC;EAEtD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAEnC,MAAMY,YAAY,GAAIC,KAAK,IAAK;IAC9BJ,QAAQ,CAACI,KAAK,CAACC,MAAM,CAACN,KAAK,CAAC;IAC5BG,OAAO,CAACE,KAAK,CAACC,MAAM,CAACN,KAAK,CAACO,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC;EAClD,CAAC;EACD;EACA,MAAMC,qBAAqB,GAAGnB,WAAW,CAAC,YAAY;IACpD,IAAI;MACF,MAAMoB,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,iBAAiB,CAAC;MACnDZ,aAAa,CAACW,QAAQ,CAACE,IAAI,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,kBAAkB,CAACD,KAAK,CAAC;IAC3B;EACF,CAAC,EAAE,EAAE,CAAC;EAIN,MAAMC,kBAAkB,GAAID,KAAc,IAAK;IAC7CE,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C;EACF,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACdkB,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACA,qBAAqB,CAAC,CAAC;EAC3B,IAAIX,UAAU,EAAEiB,OAAO,CAACC,GAAG,CAAClB,UAAU,CAAC;EACvC,oBACEH,OAAA;IAAKsB,SAAS,EAAC,mBAAmB;IAAAC,QAAA,EAC/BpB,UAAU,iBAAIH,OAAA,CAACF,UAAU;MAACK,UAAU,EAAEA;IAAW;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV;AAACzB,EAAA,CApCQD,gBAAgB;AAAA2B,EAAA,GAAhB3B,gBAAgB;AAsCzB,eAAeA,gBAAgB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}