{"ast":null,"code":"var _jsxFileName = \"/Users/rabihyamani/Desktop/IBKS/ibks/src/Component/SingleTicket/index.tsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport TicketView from \"../TicketView\";\n\n// interface Ticket {\n//   id: number;\n//   title: string;\n//   description: string;\n//   priorityId: number;\n//   statusId: number;\n//   ticketTypeId: number;\n//   priorityById: {\n//     id: number;\n//     title: string;\n//   };\n//   statusById: {\n//     id: number;\n//     title: string;\n//   };\n//   ticketTypeById: {\n//     id: number;\n//     title: string;\n//   };\n//   applicationName: string;\n//   ticketReplies: TicketReply[];\n// }\n\n// interface TicketReply {\n//   replyId: number;\n//   tId: number;\n//   reply: string;\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SingleTicketView() {\n  _s();\n  const [ticketData, setTicketData] = useState();\n\n  //   const [value, setValue] = useState(\"\");\n  //   const [rows, setRows] = useState(3);\n\n  //   const handleChange = (event) => {\n  //     setValue(event.target.value);\n  //     setRows(event.target.value.split(\"\\n\").length); // Adjust rows based on line breaks\n  //   };\n  //   console.log(value);\n  const fetchSingleTicketData = useCallback(async () => {\n    try {\n      const response = await axios.get(\"/api/tickets/1\");\n      setTicketData(response.data);\n    } catch (error) {\n      handleRequestError(error);\n    }\n  }, []);\n  const handleRequestError = error => {\n    console.error(\"An error occurred:\", error);\n    // Add logic here to handle or display the error message to the user\n  };\n  useEffect(() => {\n    fetchSingleTicketData();\n  }, [fetchSingleTicketData]);\n  //   if (ticketData) console.log(ticketData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto\",\n    children: ticketData && /*#__PURE__*/_jsxDEV(TicketView, {\n      data: ticketData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 22\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(SingleTicketView, \"OPJEZgETLZZfHuqKhtWt3+gUjjY=\");\n_c = SingleTicketView;\nexport default SingleTicketView;\nvar _c;\n$RefreshReg$(_c, \"SingleTicketView\");","map":{"version":3,"names":["axios","useCallback","useEffect","useState","TicketView","jsxDEV","_jsxDEV","SingleTicketView","_s","ticketData","setTicketData","fetchSingleTicketData","response","get","data","error","handleRequestError","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rabihyamani/Desktop/IBKS/ibks/src/Component/SingleTicket/index.tsx"],"sourcesContent":["import axios from \"axios\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport TicketView from \"../TicketView\";\n\n// interface Ticket {\n//   id: number;\n//   title: string;\n//   description: string;\n//   priorityId: number;\n//   statusId: number;\n//   ticketTypeId: number;\n//   priorityById: {\n//     id: number;\n//     title: string;\n//   };\n//   statusById: {\n//     id: number;\n//     title: string;\n//   };\n//   ticketTypeById: {\n//     id: number;\n//     title: string;\n//   };\n//   applicationName: string;\n//   ticketReplies: TicketReply[];\n// }\n\n// interface TicketReply {\n//   replyId: number;\n//   tId: number;\n//   reply: string;\n// }\n\nfunction SingleTicketView() {\n  const [ticketData, setTicketData] = useState();\n\n  //   const [value, setValue] = useState(\"\");\n  //   const [rows, setRows] = useState(3);\n\n  //   const handleChange = (event) => {\n  //     setValue(event.target.value);\n  //     setRows(event.target.value.split(\"\\n\").length); // Adjust rows based on line breaks\n  //   };\n  //   console.log(value);\n  const fetchSingleTicketData = useCallback(async () => {\n    try {\n      const response = await axios.get(\"/api/tickets/1\");\n      setTicketData(response.data);\n    } catch (error) {\n      handleRequestError(error);\n    }\n  }, []);\n\n  const handleRequestError = (error: unknown) => {\n    console.error(\"An error occurred:\", error);\n    // Add logic here to handle or display the error message to the user\n  };\n\n  useEffect(() => {\n    fetchSingleTicketData();\n  }, [fetchSingleTicketData]);\n  //   if (ticketData) console.log(ticketData);\n  return (\n    <div className=\"container mx-auto\">\n      {ticketData && <TicketView data={ticketData} />}\n    </div>\n  );\n}\n\nexport default SingleTicketView;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAGxD,OAAOC,UAAU,MAAM,eAAe;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,CAAC;;EAE9C;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA,MAAMQ,qBAAqB,GAAGV,WAAW,CAAC,YAAY;IACpD,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,gBAAgB,CAAC;MAClDH,aAAa,CAACE,QAAQ,CAACE,IAAI,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,kBAAkB,CAACD,KAAK,CAAC;IAC3B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,kBAAkB,GAAID,KAAc,IAAK;IAC7CE,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C;EACF,CAAC;EAEDb,SAAS,CAAC,MAAM;IACdS,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACA,qBAAqB,CAAC,CAAC;EAC3B;EACA,oBACEL,OAAA;IAAKY,SAAS,EAAC,mBAAmB;IAAAC,QAAA,EAC/BV,UAAU,iBAAIH,OAAA,CAACF,UAAU;MAACU,IAAI,EAAEL;IAAW;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV;AAACf,EAAA,CAlCQD,gBAAgB;AAAAiB,EAAA,GAAhBjB,gBAAgB;AAoCzB,eAAeA,gBAAgB;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}