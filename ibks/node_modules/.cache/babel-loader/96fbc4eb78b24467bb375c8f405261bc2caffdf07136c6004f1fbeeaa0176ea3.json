{"ast":null,"code":"var _jsxFileName = \"/Users/rabihyamani/Desktop/IBKS/ibks/src/Component/SingleTicket/index.tsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport TicketView from \"../TicketView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SingleTicketView() {\n  _s();\n  const [ticketData, setTicketData] = useState();\n  const [prioritiesData, setPrioritiesData] = useState([]);\n  const [typesData, setTypesData] = useState([]);\n\n  //   const [isFocused, setIsFocused] = useState(false);\n\n  const [value, setValue] = useState(\"\");\n  const [rows, setRows] = useState(3);\n  const handleChange = event => {\n    setValue(event.target.value);\n    setRows(event.target.value.split(\"\\n\").length); // Adjust rows based on line breaks\n  };\n  //   console.log(value);\n  const fetchSingleTicketData = useCallback(async () => {\n    try {\n      const response = await axios.get(\"/api/tickets/39\");\n      setTicketData(response.data);\n    } catch (error) {\n      handleRequestError(error);\n    }\n  }, []);\n  const fetchPrioritiesData = useCallback(async () => {\n    try {\n      const response = await axios.get(\"/api/tickets/priorities\");\n      setPrioritiesData(response.data);\n    } catch (error) {\n      handleRequestError(error);\n    }\n  }, []);\n  const fetchTicketTypesData = useCallback(async () => {\n    try {\n      const response = await axios.get(\"/api/tickets/types\");\n      setTypesData(response.data);\n    } catch (error) {\n      handleRequestError(error);\n    }\n  }, []);\n  const updateTicket = useCallback(async () => {\n    try {\n      await axios.put(`/api/tickets/${ticketData === null || ticketData === void 0 ? void 0 : ticketData.id}`, ticketData);\n      console.log(\"Ticket updated successfully\");\n    } catch (error) {\n      handleRequestError(error);\n    }\n  }, [ticketData]);\n  const handleRequestError = error => {\n    console.error(\"An error occurred:\", error);\n    // Add logic here to handle or display the error message to the user\n  };\n  useEffect(() => {\n    fetchSingleTicketData();\n    fetchPrioritiesData();\n    fetchTicketTypesData();\n  }, [fetchSingleTicketData, fetchPrioritiesData, fetchTicketTypesData]);\n  if (ticketData) console.log(ticketData);\n  //   console.log(ticketData?.applicationName);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto\",\n    children: ticketData && /*#__PURE__*/_jsxDEV(TicketView, {\n      id: 0,\n      title: \"\",\n      description: \"\",\n      priorityId: 0,\n      statusId: 0,\n      ticketTypeId: 0,\n      priorityById: {\n        id: 0,\n        title: \"\"\n      },\n      statusById: {\n        id: 0,\n        title: \"\"\n      },\n      ticketTypeById: {\n        id: 0,\n        title: \"\"\n      },\n      applicationName: \"\",\n      ticketReplies: []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 55\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(SingleTicketView, \"3V1OSW3v0t8Snv4jCMw5OAHxe+A=\");\n_c = SingleTicketView;\nexport default SingleTicketView;\nvar _c;\n$RefreshReg$(_c, \"SingleTicketView\");","map":{"version":3,"names":["axios","useCallback","useEffect","useState","TicketView","jsxDEV","_jsxDEV","SingleTicketView","_s","ticketData","setTicketData","prioritiesData","setPrioritiesData","typesData","setTypesData","value","setValue","rows","setRows","handleChange","event","target","split","length","fetchSingleTicketData","response","get","data","error","handleRequestError","fetchPrioritiesData","fetchTicketTypesData","updateTicket","put","id","console","log","className","children","title","description","priorityId","statusId","ticketTypeId","priorityById","statusById","ticketTypeById","applicationName","ticketReplies","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rabihyamani/Desktop/IBKS/ibks/src/Component/SingleTicket/index.tsx"],"sourcesContent":["import axios from \"axios\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport TicketView from \"../TicketView\";\n\ninterface Priority {\n  id: number;\n  title: string;\n}\n\ninterface Ticket {\n  id: number;\n  title: string;\n  description: string;\n  priorityId: number;\n  statusId: number;\n  ticketTypeId: number;\n  priorityById: {\n    id: number;\n    title: string;\n  };\n  statusById: {\n    id: number;\n    title: string;\n  };\n  ticketTypeById: {\n    id: number;\n    title: string;\n  };\n  applicationName: string;\n  ticketReplies: TicketReply[];\n}\n\ninterface TicketReply {\n  replyId: number;\n  tId: number;\n  reply: string;\n}\n\ninterface Type {\n  id: number;\n  title: string;\n}\nfunction SingleTicketView() {\n  const [ticketData, setTicketData] = useState<Ticket>();\n  const [prioritiesData, setPrioritiesData] = useState<Priority[]>([]);\n  const [typesData, setTypesData] = useState<Type[]>([]);\n\n  //   const [isFocused, setIsFocused] = useState(false);\n\n  const [value, setValue] = useState(\"\");\n  const [rows, setRows] = useState(3);\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n    setRows(event.target.value.split(\"\\n\").length); // Adjust rows based on line breaks\n  };\n  //   console.log(value);\n  const fetchSingleTicketData = useCallback(async () => {\n    try {\n      const response = await axios.get(\"/api/tickets/39\");\n      setTicketData(response.data);\n    } catch (error) {\n      handleRequestError(error);\n    }\n  }, []);\n\n  const fetchPrioritiesData = useCallback(async () => {\n    try {\n      const response = await axios.get(\"/api/tickets/priorities\");\n      setPrioritiesData(response.data);\n    } catch (error) {\n      handleRequestError(error);\n    }\n  }, []);\n\n  const fetchTicketTypesData = useCallback(async () => {\n    try {\n      const response = await axios.get(\"/api/tickets/types\");\n      setTypesData(response.data);\n    } catch (error) {\n      handleRequestError(error);\n    }\n  }, []);\n\n  const updateTicket = useCallback(async () => {\n    try {\n      await axios.put(`/api/tickets/${ticketData?.id}`, ticketData);\n      console.log(\"Ticket updated successfully\");\n    } catch (error) {\n      handleRequestError(error);\n    }\n  }, [ticketData]);\n\n  const handleRequestError = (error: unknown) => {\n    console.error(\"An error occurred:\", error);\n    // Add logic here to handle or display the error message to the user\n  };\n\n  useEffect(() => {\n    fetchSingleTicketData();\n    fetchPrioritiesData();\n    fetchTicketTypesData();\n  }, [fetchSingleTicketData, fetchPrioritiesData, fetchTicketTypesData]);\n  if (ticketData) console.log(ticketData);\n  //   console.log(ticketData?.applicationName);\n  return (\n    <div className=\"container mx-auto\">{ticketData && <TicketView id={0} title={\"\"} description={\"\"} priorityId={0} statusId={0} ticketTypeId={0} priorityById={{\n          id: 0,\n          title: \"\"\n      }} statusById={{\n          id: 0,\n          title: \"\"\n      }} ticketTypeById={{\n          id: 0,\n          title: \"\"\n      }} applicationName={\"\"} ticketReplies={[]} />}</div>\n  );\n}\n\nexport default SingleTicketView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}